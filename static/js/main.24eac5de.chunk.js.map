{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/TodolistsList/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/TodolistsList/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","todolistsAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialize","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","deadline","description","priority","startDate","res","resultCode","action","updateTaskAC","catch","console","warn","rootReducer","combineReducers","state","filter","todoListId","map","todolist","copyState","todolists","forEach","tl","entityStatus","app","auth","store","createStore","applyMiddleware","thunkMiddleware","useAppSelector","useSelector","window","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","thunk","items","setTasksAC","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","demo","removeTaskAC","removeTaskTC","item","addTaskTC","changeStatus","newTitle","removeTodolistAC","changeTodolistTitleAC","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","forwardRef","ref","elevation","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","a","isAxiosError","resetForm","justifyContent","handleSubmit","FormControl","FormLabel","href","target","rel","FormGroup","margin","getFieldProps","touched","fontWeight","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","path","element","top","textAlign","CircularProgress","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.24eac5de.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '4d0524f8-ac75-4061-8829-77c9b9ae1d87'\n    }\n})\n\n// auth-api\nexport const authAPI = {\n    me(){\n        return instance.get<ResponseType<{me: MeParamsType}>>('/auth/me')\n    },\n    login(data: LogginParamsType){\n        return instance.post<LogginParamsType, AxiosResponse<ResponseType<{userId: string}>>>('/auth/login', data)\n    },\n    logout(){\n        return instance.delete<ResponseType>('/auth/login')\n    }\n} \n// api\nexport const todolistsAPI = {\n    getTodolists() {\n        return instance.get<TodolistType[]>('todo-lists');\n    },\n    createTodolist(title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\n    },\n    deleteTodolist(id: string) {\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\n    },\n    updateTodolist(id: string, title: string) {\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\n    },\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\n    }\n}\n\n// types\nexport type TodolistType = {\n    id: string\n    title: string\n    addedDate: string\n    order: number\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors: Array<string>\n    data: D\n}\nexport type LogginParamsType = {\n    email:string\n    password: string\n    rememberMe?: boolean\n    captcha?: string\n}\nexport type MeParamsType = {\n    id:number,\n    email:string,\n    login:string\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress = 1,\n    Completed = 2,\n    Draft = 3\n}\n\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    Hi = 2,\n    Urgently = 3,\n    Later = 4\n}\n\nexport type TaskType = {\n    description: string\n    title: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    id: string\n    todoListId: string\n    order: number\n    addedDate: string\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\ntype GetTasksResponse = {\n    error: string | null\n    totalCount: number\n    items: TaskType[]\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\nimport {ResponseType} from '../api/todolists-api'\nimport {Dispatch} from 'redux'\n\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppErrorAC(error.message ? error.message : 'Some error occurred'))\n    dispatch(setAppStatusAC('failed'))\n}\n","import { Dispatch } from 'redux'\r\nimport axios from 'axios'\r\nimport { authAPI } from './../../../api/todolists-api';\r\nimport { LogginParamsType } from '../../../api/todolists-api'\r\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../../app/app-reducer'\r\nimport { handleServerAppError, handleServerNetworkError } from '../../../utils/error-utils';\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'login/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LogginParamsType) => async(dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try{\r\n        const res = await authAPI.login(data)\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        }else{\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }catch(e){\r\n        if(axios.isAxiosError(e)){\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }    \r\n}\r\n\r\nexport const logoutTC = () => async(dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try{\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    }catch(e){\r\n        if(axios.isAxiosError(e)){\r\n            handleServerNetworkError(e, dispatch)\r\n        }\r\n    }\r\n }\r\n\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType","\nimport { Dispatch } from 'redux'\nimport axios from 'axios'\n\nimport { setIsLoggedInAC } from '../features/TodolistsList/Login/auth-reducer';\nimport { handleServerAppError, handleServerNetworkError } from '../utils/error-utils';\nimport { authAPI } from '../api/todolists-api';\n\nconst initialState: InitialStateType = {\n    status: 'idle',\n    error: null,\n    isInitialize: false\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status: action.status}\n        case 'APP/SET-ERROR':\n            return {...state, error: action.error}\n        case 'APP/SET-INITIALIZED':\n            return {...state, isInitialize: action.value}\n        default:\n            return {...state}\n    }\n}\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\nexport type InitialStateType = {\n    // происходит ли сейчас взаимодействие с сервером\n    status: RequestStatusType\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\n    error: string | null\n    //  что бы избавить от дергания при логинизации\n    isInitialize: boolean\n}\n\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const)\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const)\nexport const setAppInitializedAC = (value: boolean) => ({type: 'APP/SET-INITIALIZED', value} as const)\n\nexport const initializeAppTC = () => async(dispatch:Dispatch) => {\n    try{\n        const res = await authAPI.me()\n        if(res.data.resultCode===0){\n            dispatch(setIsLoggedInAC(true));\n        }else{\n            handleServerAppError(res.data, dispatch)\n        }\n    }catch(e){\n        if(axios.isAxiosError(e)){\n            handleServerNetworkError(e, dispatch)\n        }\n    } finally{\n        dispatch(setAppInitializedAC(true))\n    }\n}\n\n\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetAppInitializedActionType = ReturnType<typeof setAppInitializedAC>\n\ntype ActionsType =\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | SetAppInitializedActionType\n","import { AddTodolistActionType, RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer'\nimport { TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType } from '../../api/todolists-api'\nimport { Dispatch } from 'redux'\nimport { AppRootStateType } from '../../app/store'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils'\n\nconst initialState: TasksStateType = {}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK':\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\n        case 'ADD-TASK':\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\n        case 'UPDATE-TASK':\n            return {\n                ...state,\n                [action.todolistId]: state[action.todolistId]\n                    .map(t => t.id === action.taskId ? {...t, ...action.model} : t)\n            }\n        case 'ADD-TODOLIST':\n            return {...state, [action.todolist.id]: []}\n        case 'REMOVE-TODOLIST':\n            const copyState = {...state}\n            delete copyState[action.id]\n            return copyState\n        case 'SET-TODOLISTS': {\n            const copyState = {...state}\n            action.todolists.forEach(tl => {\n                copyState[tl.id] = []\n            })\n            return copyState\n        }\n        case 'SET-TASKS':\n            return {...state, [action.todolistId]: action.tasks}\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({type: 'REMOVE-TASK', taskId, todolistId} as const)\nexport const addTaskAC = (task: TaskType) => ({type: 'ADD-TASK', task} as const)\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => ({\n    type: 'UPDATE-TASK',\n    model,\n    todolistId,\n    taskId\n} as const)\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string) => ({\n    type: 'SET-TASKS',\n    tasks,\n    todolistId\n} as const)\n\n// thunks\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.getTasks(todolistId)\n        .then((res) => {\n            const tasks = res.data.items\n            dispatch(setTasksAC(tasks, todolistId))\n            dispatch(setAppStatusAC('succeeded'))\n        })\n}\nexport const removeTaskTC = (taskId: string, todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\n    todolistsAPI.deleteTask(todolistId, taskId)\n        .then(res => {\n            const action = removeTaskAC(taskId, todolistId)\n            dispatch(action)\n        })\n}\nexport const addTaskTC = (title: string, todolistId: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\n    dispatch(setAppStatusAC('loading'))\n    todolistsAPI.createTask(todolistId, title)\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                const task = res.data.data.item\n                const action = addTaskAC(task)\n                dispatch(action)\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch);\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\n    (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\n        if (!task) {\n            //throw new Error(\"task not found in the state\");\n            console.warn('task not found in the state')\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            deadline: task.deadline,\n            description: task.description,\n            priority: task.priority,\n            startDate: task.startDate,\n            title: task.title,\n            status: task.status,\n            ...domainModel\n        }\n\n        todolistsAPI.updateTask(todolistId, taskId, apiModel)\n            .then(res => {\n                if (res.data.resultCode === 0) {\n                    const action = updateTaskAC(taskId, domainModel, todolistId)\n                    dispatch(action)\n                } else {\n                    handleServerAppError(res.data, dispatch);\n                }\n            })\n            .catch((error) => {\n                handleServerNetworkError(error, dispatch);\n            })\n    }\n\n// types\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\ntype ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n    | SetTodolistsActionType\n    | ReturnType<typeof setTasksAC>\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\nimport {Dispatch} from 'redux'\nimport {RequestStatusType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\n\nconst initialState: Array<TodolistDomainType> = []\n\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.id)\n        case 'ADD-TODOLIST':\n            return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\n\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\n        case 'CHANGE-TODOLIST-FILTER':\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\n            return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\n        case 'SET-TODOLISTS':\n            return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\n        default:\n            return state\n    }\n}\n\n// actions\nexport const removeTodolistAC = (id: string) => ({type: 'REMOVE-TODOLIST', id} as const)\nexport const addTodolistAC = (todolist: TodolistType) => ({type: 'ADD-TODOLIST', todolist} as const)\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\n    type: 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\n    type: 'CHANGE-TODOLIST-FILTER',\n    id,\n    filter\n} as const)\nexport const changeTodolistEntityStatusAC = (id: string, status: RequestStatusType) => ({\n    type: 'CHANGE-TODOLIST-ENTITY-STATUS', id, status } as const)\nexport const setTodolistsAC = (todolists: Array<TodolistType>) => ({type: 'SET-TODOLISTS', todolists} as const)\n\n// thunks\nexport const fetchTodolistsTC = () => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.getTodolists()\n            .then((res) => {\n                dispatch(setTodolistsAC(res.data))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const removeTodolistTC = (todolistId: string) => {\n    return (dispatch: ThunkDispatch) => {\n        //изменим глобальный статус приложения, чтобы вверху полоса побежала\n        dispatch(setAppStatusAC('loading'))\n        //изменим статус конкретного тудулиста, чтобы он мог задизеблить что надо\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'))\n        todolistsAPI.deleteTodolist(todolistId)\n            .then((res) => {\n                dispatch(removeTodolistAC(todolistId))\n                //скажем глобально приложению, что асинхронная операция завершена\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const addTodolistTC = (title: string) => {\n    return (dispatch: ThunkDispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistsAPI.createTodolist(title)\n            .then((res) => {\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            })\n    }\n}\nexport const changeTodolistTitleTC = (id: string, title: string) => {\n    return (dispatch: Dispatch<ActionsType>) => {\n        todolistsAPI.updateTodolist(id, title)\n            .then((res) => {\n                dispatch(changeTodolistTitleAC(id, title))\n            })\n    }\n}\n\n// types\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\ntype ActionsType =\n    | RemoveTodolistActionType\n    | AddTodolistActionType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeTodolistFilterAC>\n    | SetTodolistsActionType\n    | ReturnType<typeof changeTodolistEntityStatusAC>\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistDomainType = TodolistType & {\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n}\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType>\n","import { tasksReducer } from '../features/TodolistsList/tasks-reducer';\nimport { todolistsReducer } from '../features/TodolistsList/todolists-reducer';\nimport { applyMiddleware, combineReducers, createStore } from 'redux'\nimport { TypedUseSelectorHook, useSelector } from 'react-redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { appReducer } from './app-reducer'\nimport { authReducer } from '../features/TodolistsList/Login/auth-reducer';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { AddBox } from '@mui/icons-material';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n    disabled?: boolean\n}\n\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\n    console.log('AddItemForm called')\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItemHandler = () => {\n        if (title.trim() !== '') {\n            addItem(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItemHandler();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   disabled={disabled}\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, { ChangeEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log('EditableSpan called');\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, {ChangeEvent, useCallback} from 'react'\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\nimport { Delete } from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.status === TaskStatuses.Completed}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, { useCallback, useEffect } from 'react'\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport { Delete } from '@mui/icons-material';\nimport { Task } from './Task/Task'\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\nimport { useDispatch } from 'react-redux'\nimport { fetchTasksTC } from '../tasks-reducer'\n\ntype PropsType = {\n    todolist: TodolistDomainType\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    demo?: boolean\n}\n\nexport const Todolist = React.memo(function ({...props}: PropsType) {\n    console.log('Todolist called')\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        const thunk = fetchTasksTC(props.todolist.id)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.todolist.id)\n    }, [props.addTask, props.todolist.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.todolist.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.todolist.id, title)\n    }, [props.todolist.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.todolist.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\n    }\n    if (props.todolist.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import React, { useCallback, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport {  useAppSelector } from '../../app/store';\nimport { Navigate } from 'react-router-dom';\nimport {\n    addTodolistTC,\n    changeTodolistFilterAC,\n    changeTodolistTitleTC,\n    fetchTodolistsTC,\n    FilterValuesType,\n    removeTodolistTC,\n} from './todolists-reducer'\nimport { addTaskTC, removeTaskTC, updateTaskTC } from './tasks-reducer'\nimport { TaskStatuses } from '../../api/todolists-api'\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { AddItemForm } from '../../components/AddItemForm/AddItemForm'\nimport { Todolist } from './Todolist/Todolist'\n\ntype PropsType = {\n    demo?: boolean\n}\n\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\n    const todolists = useAppSelector(state => state.todolists)\n    const tasks = useAppSelector(state => state.tasks)\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\n\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        const thunk = fetchTodolistsTC()\n        dispatch(thunk)\n    }, [])\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const thunk = removeTaskTC(id, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const thunk = addTaskTC(title, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\n        const thunk = updateTaskTC(id, {status}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\n        dispatch(thunk)\n    }, [])\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value)\n        dispatch(action)\n    }, [])\n\n    const removeTodolist = useCallback(function (id: string) {\n        const thunk = removeTodolistTC(id)\n        dispatch(thunk)\n    }, [])\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const thunk = changeTodolistTitleTC(id, title)\n        dispatch(thunk)\n    }, [])\n\n    const addTodolist = useCallback((title: string) => {\n        const thunk = addTodolistTC(title)\n        dispatch(thunk)\n    }, [dispatch])\n\n    if(!isLoggedIn){\n        return <Navigate to=\"/login\"/>\n    }\n\n    return <>\n        <Grid container style={{padding: '20px'}}>\n            <AddItemForm addItem={addTodolist}/>\n        </Grid>\n        <Grid container spacing={3}>\n            {\n                todolists.map(tl => {\n                    let allTodolistTasks = tasks[tl.id]\n\n                    return <Grid item key={tl.id}>\n                        <Paper style={{padding: '10px'}}>\n                            <Todolist\n                                todolist={tl}\n                                tasks={allTodolistTasks}\n                                removeTask={removeTask}\n                                changeFilter={changeFilter}\n                                addTask={addTask}\n                                changeTaskStatus={changeStatus}\n                                removeTodolist={removeTodolist}\n                                changeTaskTitle={changeTaskTitle}\n                                changeTodolistTitle={changeTodolistTitle}\n                                demo={demo}\n                            />\n                        </Paper>\n                    </Grid>\n                })\n            }\n        </Grid>\n    </>\n}\n","import React from 'react';\nimport Snackbar from '@mui/material/Snackbar';\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from '../../app/store';\nimport { setAppErrorAC } from '../../app/app-reducer';\n\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\n    props, ref) {\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\n});\n\n\nexport function ErrorSnackbar() {\n\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\n\n    const dispatch = useDispatch();\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        dispatch(setAppErrorAC(null))\n    };\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\n                {error}\n            </Alert>\n        </Snackbar>\n    );\n}\n","import React from 'react'\nimport { Navigate } from 'react-router-dom';\nimport Grid from '@mui/material/Grid';\nimport Checkbox from '@mui/material/Checkbox';\nimport FormControl from '@mui/material/FormControl';\nimport FormControlLabel from '@mui/material/FormControlLabel';\nimport FormGroup from '@mui/material/FormGroup';\nimport FormLabel from '@mui/material/FormLabel';\nimport TextField from '@mui/material/TextField';\nimport Button from '@mui/material/Button';\nimport { useFormik } from 'formik';\nimport { useDispatch } from 'react-redux';\nimport { loginTC } from './auth-reducer';\nimport { useAppSelector } from '../../../app/store';\n\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n\n    const dispatch = useDispatch()\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\n\n    const formik = useFormik({\n        initialValues: {\n          email: '',\n          password: '',\n          rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {}\n            if(!values.email) {\n                errors.email = 'Required email'\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address'\n            }\n            if(!values.password) {\n                errors.password = 'Required password'\n            } else if (!/^[a-z0-9A-Z]{4}/i.test(values.password)){\n                errors.password = 'Invalid password address'\n            }\n            return errors\n        },\n        onSubmit: values => {\n            dispatch(loginTC(values))\n            formik.resetForm()\n        }\n      });\n\n      if(isLoggedIn){\n        return <Navigate to='/'/>\n    }\n      \n    return <Grid container justifyContent={'center'}>\n        <Grid item justifyContent={'center'}>\n            <form onSubmit={ formik.handleSubmit }>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'} target={'_blank'} rel={'noreferrer'}>\n                                here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField \n                            label=\"Email\" \n                            margin=\"normal\"\n                            {...formik.getFieldProps('email')}\n                        />\n                        {formik.touched.email && formik.errors.email && <div style={{color:'#ff458a', fontWeight: 'bold' }}>{formik.errors.email}</div>}\n                        <TextField \n                            type=\"password\" \n                            label=\"Password\" \n                            margin=\"normal\"\n                            {...formik.getFieldProps('password')}\n                        />\n                        {formik.touched.password && formik.errors.password && <div style={{color:'#ff458a', fontWeight: 'bold'}}>{formik.errors.password}</div>}\n                        <FormControlLabel \n                            label={'Remember me'} \n                            control={<Checkbox \n                                {...formik.getFieldProps('rememberMe')}\n                            />} \n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\n                            Login\n                        </Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}","import React, { useEffect } from 'react';\nimport './App.css'\nimport { TodolistsList } from '../features/TodolistsList/TodolistsList'\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from './store'\nimport { initializeAppTC } from './app-reducer'\nimport { Routes, Route, Navigate } from 'react-router-dom';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { Menu } from '@mui/icons-material';\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar'\nimport { Login } from '../features/TodolistsList/Login/Login'\nimport CircularProgress from '@mui/material/CircularProgress';\nimport { logoutTC } from '../features/TodolistsList/Login/auth-reducer';\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n    const dispatch = useDispatch();\n\n    const status = useAppSelector((state) => state.app.status)\n    const isInitialize = useAppSelector(state => state.app.isInitialize)\n    const isLoggedIn = useAppSelector(state => state.auth.isLoggedIn)\n    \n    const logOutHandler = () => {\n        dispatch(logoutTC())\n    }\n    useEffect(()=>{\n        dispatch( initializeAppTC() )\n    },[])\n\n    if(!isInitialize){\n        return (\n        <div\n            style={{position:'fixed', top:'30%', textAlign:'center', width:'100%'}}\n        >\n            <CircularProgress/>\n        </div>)\n    }\n    return (\n        <div className=\"App\">\n            <ErrorSnackbar/>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        News\n                    </Typography>\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logOutHandler}>Log out</Button>}\n                </Toolbar>\n                {status === 'loading' && <LinearProgress/>}\n            </AppBar>\n            <Container fixed>\n                <Routes>\n                    <Route path='/' element = {<TodolistsList/>} />\n                    <Route path='/login' element = {<Login/>} />\n                    <Route path='/404' element = {<h1>404: PAGE NOT FOUND</h1>} />\n                    <Route path='*' element = {<Navigate to='/404'/>} />\n                </Routes>\n            </Container>\n        </div>\n    )\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport {Provider} from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {store} from './app/store';\nimport './index.css';\n\n\nReactDOM.render(\n    <BrowserRouter>\n        <Provider store={store}>\n                <App/>\n            </Provider>\n    </BrowserRouter>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}